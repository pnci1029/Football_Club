name: Deploy Backend to Cafe24

on:
  push:
    branches: [ main ]
#    paths: ['be/**']
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create application-prod.yml with secrets
      run: echo "${{ secrets.APPLICATION_PROD_YML }}" > be/src/main/resources/application-prod.yml

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./be
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/football-club-backend:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/football-club-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.CAFE24_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
        ssh-keyscan -H ${{ secrets.CAFE24_HOST }} >> ~/.ssh/known_hosts

    - name: Copy docker-compose.yml to server
      run: |
        scp -i ~/.ssh/id_rsa docker-compose.yml root@${{ secrets.CAFE24_HOST }}:/opt/football-club/

    - name: Deploy backend on server with Blue-Green
      run: |
        ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
          cd /opt/football-club &&
          echo 'MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}' > .env &&
          echo 'MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}' >> .env &&
          echo 'MYSQL_USER=${{ secrets.MYSQL_USER }}' >> .env &&
          echo 'MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}' >> .env &&
          echo 'MYSQL_HOST=db' >> .env &&
          
          docker pull ${{ secrets.DOCKER_USERNAME }}/football-club-backend:${{ github.sha }} &&
          docker tag ${{ secrets.DOCKER_USERNAME }}/football-club-backend:${{ github.sha }} football-club-backend:latest &&
          
          # Blue-Green 포트 결정
          if docker ps --format \"table {{.Names}}\" | grep -q \"backend-blue\"; then
            NEW_COLOR=\"green\" && NEW_PORT=8083 && OLD_COLOR=\"blue\"
          else
            NEW_COLOR=\"blue\" && NEW_PORT=8082 && OLD_COLOR=\"green\"
          fi
          
          # 포트 충돌 방지 - 기존 컨테이너들 정리
          docker stop backend-\$NEW_COLOR 2>/dev/null || true
          docker rm backend-\$NEW_COLOR 2>/dev/null || true
          
          # 포트 사용 중인 프로세스 확인 및 정리
          lsof -ti:\$NEW_PORT | xargs kill -9 2>/dev/null || true
          
          # 새 컨테이너 시작
          echo \"Starting backend-\$NEW_COLOR on port \$NEW_PORT\"
          docker run -d --name backend-\$NEW_COLOR -p \$NEW_PORT:8082 --env-file .env football-club-backend:latest
          
          # 컨테이너 상태 확인
          sleep 5
          echo \"Container status:\"
          docker ps | grep backend-\$NEW_COLOR || echo \"Container not running\"
          echo \"Container logs:\"
          docker logs backend-\$NEW_COLOR | tail -20
          
          # 헬스체크 대기
          echo \"Starting health check on port \$NEW_PORT\"
          for i in {1..30}; do
            echo \"Health check attempt \$i/30\"
            if curl -f http://localhost:\$NEW_PORT/api/test/51 2>/dev/null; then
              echo \"Health check passed\"
              break
            fi
            if [ \$i -eq 30 ]; then
              echo \"Deploy failed - health check timeout\"
              echo \"Final container logs:\"
              docker logs backend-\$NEW_COLOR | tail -50
              docker rm -f backend-\$NEW_COLOR
              exit 1
            fi
            sleep 10
          done
          
          # Nginx 업데이트
          echo \"Updating Nginx to use port \$NEW_PORT\"
          sudo sed -i \"s/proxy_pass http:\/\/localhost:[0-9]*\/api\//proxy_pass http:\/\/localhost:\$NEW_PORT\/api\//g\" /etc/nginx/sites-enabled/football-club.conf
          echo \"Nginx configuration updated:\"
          grep \"proxy_pass.*localhost:\" /etc/nginx/sites-enabled/football-club.conf
          sudo nginx -t && sudo systemctl reload nginx
          echo \"Nginx reloaded successfully\"
          
          # 기존 컨테이너 제거
          docker stop backend-\$OLD_COLOR 2>/dev/null || true
          docker rm backend-\$OLD_COLOR 2>/dev/null || true
          docker stop backend 2>/dev/null && docker rm backend 2>/dev/null || true
          
          docker image prune -f
        "

    - name: Deployment notification
      run: echo "✅ Backend deployment completed successfully!"
