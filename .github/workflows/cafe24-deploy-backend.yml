name: Deploy Backend to Cafe24

on:
  push:
    branches: [ main ]
#    paths: ['be/**']
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create application-prod.yml with secrets
      run: echo "${{ secrets.APPLICATION_PROD_YML }}" > be/src/main/resources/application-prod.yml

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./be
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/football-club-backend:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/football-club-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.CAFE24_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
        ssh-keyscan -H ${{ secrets.CAFE24_HOST }} >> ~/.ssh/known_hosts

    - name: Copy docker-compose.yml to server
      run: |
        scp -i ~/.ssh/id_rsa docker-compose.yml root@${{ secrets.CAFE24_HOST }}:/opt/football-club/

    - name: Deploy backend on server with Blue-Green
      run: |
        ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
          cd /opt/football-club &&
          echo 'MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}' > .env &&
          echo 'MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}' >> .env &&
          echo 'MYSQL_USER=${{ secrets.MYSQL_USER }}' >> .env &&
          echo 'MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}' >> .env &&
          echo 'MYSQL_HOST=db' >> .env &&
          
          # Pull new image
          docker pull ${{ secrets.DOCKER_USERNAME }}/football-club-backend:${{ github.sha }} &&
          docker tag ${{ secrets.DOCKER_USERNAME }}/football-club-backend:${{ github.sha }} football-club-backend:latest &&
          
          # Determine current running container and new port
          if docker ps --format \"table {{.Names}}\" | grep -q \"backend-blue\"; then
            echo \"Blue is running, deploying to Green (port 8081)\"
            NEW_COLOR=\"green\"
            NEW_PORT=8081
            OLD_COLOR=\"blue\"
            OLD_PORT=8080
          else
            echo \"Green is running or first deploy, deploying to Blue (port 8080)\"
            NEW_COLOR=\"blue\"
            NEW_PORT=8080
            OLD_COLOR=\"green\"
            OLD_PORT=8081
          fi
          
          # Start new container
          docker run -d --name backend-\$NEW_COLOR \
            --network football-club_default \
            -p \$NEW_PORT:8080 \
            --env-file .env \
            football-club-backend:latest
          
          # Wait for new container to be ready
          echo \"Waiting for new container to be ready...\"
          for i in {1..30}; do
            if curl -f http://localhost:\$NEW_PORT/health 2>/dev/null; then
              echo \"New container is ready on port \$NEW_PORT\"
              break
            fi
            if [ \$i -eq 30 ]; then
              echo \"New container failed to start\"
              docker logs backend-\$NEW_COLOR
              docker rm -f backend-\$NEW_COLOR
              exit 1
            fi
            sleep 10
          done
          
          # Update nginx configuration
          if [ -f /etc/nginx/sites-enabled/football-club.conf ]; then
            echo \"Updating nginx to point to port \$NEW_PORT\"
            sudo sed -i \"s/localhost:[0-9]*/localhost:\$NEW_PORT/g\" /etc/nginx/sites-enabled/football-club.conf
            sudo nginx -t && sudo systemctl reload nginx
          fi
          
          # Remove old container
          if docker ps -q -f name=backend-\$OLD_COLOR; then
            echo \"Stopping old container backend-\$OLD_COLOR\"
            docker stop backend-\$OLD_COLOR
            docker rm backend-\$OLD_COLOR
          fi
          
          # Clean up old images
          docker image prune -f
          
          echo \"Deployment completed. New container running on port \$NEW_PORT\"
        "

    - name: Deployment notification
      run: echo "âœ… Backend deployment completed successfully!"
