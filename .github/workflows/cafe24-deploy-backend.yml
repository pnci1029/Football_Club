name: Deploy Backend to Cafe24

on:
  push:
    branches: [ ㅁㅁㅁaaa ]
    paths: ['be/**']
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create application-prod.yml with secrets
        run: echo "${{ secrets.APPLICATION_PROD_YML }}" > be/src/main/resources/application-prod.yml

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./be
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/football-club-backend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/football-club-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CAFE24_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
          ssh-keyscan -H ${{ secrets.CAFE24_HOST }} >> ~/.ssh/known_hosts

      - name: Copy docker-compose.yml to server
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.yml root@${{ secrets.CAFE24_HOST }}:/opt/football-club/

      - name: Setup environment variables
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
            cd /opt/football-club &&
            echo 'MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}' > .env &&
            echo 'MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}' >> .env &&
            echo 'MYSQL_USER=${{ secrets.MYSQL_USER }}' >> .env &&
            echo 'MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}' >> .env
          "

      - name: Pull and tag Docker image
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
            docker pull ${{ secrets.DOCKER_USERNAME }}/football-club-backend:${{ github.sha }} &&
            docker tag ${{ secrets.DOCKER_USERNAME }}/football-club-backend:${{ github.sha }} football-club-backend:latest
          "

      - name: Determine Blue-Green deployment ports
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
            if docker ps --format \"table {{.Names}}\" | grep -q \"backend-blue\"; then
              echo \"NEW_COLOR=green\" >> /tmp/deploy_vars
              echo \"NEW_PORT=8083\" >> /tmp/deploy_vars
              echo \"OLD_COLOR=blue\" >> /tmp/deploy_vars
            else
              echo \"NEW_COLOR=blue\" >> /tmp/deploy_vars
              echo \"NEW_PORT=8082\" >> /tmp/deploy_vars
              echo \"OLD_COLOR=green\" >> /tmp/deploy_vars
            fi
            source /tmp/deploy_vars
            echo \"Selected deployment: backend-\$NEW_COLOR on port \$NEW_PORT\"
          "

      - name: Clean up existing containers and ports
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
            source /tmp/deploy_vars
            docker stop backend-\$NEW_COLOR 2>/dev/null || true
            docker rm backend-\$NEW_COLOR 2>/dev/null || true
            lsof -ti:\$NEW_PORT | xargs kill -9 2>/dev/null || true
          "

      - name: Setup Redis container
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
            docker run -d --name redis-container -p 6379:6379 redis:7-alpine 2>/dev/null || echo \"Redis already running\"
          "

      - name: Start new backend container
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
            cd /opt/football-club &&
            source /tmp/deploy_vars
            echo \"Starting backend-\$NEW_COLOR on port \$NEW_PORT\"
            docker run -d --name backend-\$NEW_COLOR -p \$NEW_PORT:8082 --env-file .env -e SPRING_PROFILES_ACTIVE=prod -e REDIS_HOST=localhost football-club-backend:latest
            sleep 5
            echo \"Container status:\"
            docker ps | grep backend-\$NEW_COLOR || echo \"Container not running\"
            echo \"Container logs:\"
            docker logs backend-\$NEW_COLOR | tail -20
          "

      - name: Health check
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
            source /tmp/deploy_vars
            echo \"Starting health check on port \$NEW_PORT\"
            for i in {1..30}; do
              echo \"Health check attempt \$i/30\"
              if curl -f http://localhost:\$NEW_PORT/api/test/51 2>/dev/null; then
                echo \"Health check passed\"
                break
              fi
              if [ \$i -eq 30 ]; then
                echo \"Deploy failed - health check timeout\"
                echo \"Final container logs:\"
                docker logs backend-\$NEW_COLOR | tail -50
                docker rm -f backend-\$NEW_COLOR
                exit 1
              fi
              sleep 10
            done
          "

      - name: Update Nginx configuration
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
            source /tmp/deploy_vars
            echo \"Updating Nginx to use port \$NEW_PORT\"
            sudo sed -i \"s/proxy_pass http:\/\/localhost:[0-9]*\/api\//proxy_pass http:\/\/localhost:\$NEW_PORT\/api\//g\" /etc/nginx/sites-enabled/nginx.conf
            echo \"Nginx configuration updated:\"
            grep \"proxy_pass.*localhost:\" /etc/nginx/sites-enabled/nginx.conf
            sudo nginx -t && sudo systemctl reload nginx
            echo \"Nginx reloaded successfully\"
          "

      - name: Clean up old containers and finalize
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.CAFE24_HOST }} "
            source /tmp/deploy_vars
            docker stop backend-\$OLD_COLOR 2>/dev/null || true
            docker rm backend-\$OLD_COLOR 2>/dev/null || true
            docker stop backend 2>/dev/null && docker rm backend 2>/dev/null || true
            
            echo \"Redis container final status:\"
            docker ps | grep redis-container || echo \"Redis not running\"
            docker logs redis-container | tail -5 2>/dev/null || echo \"No Redis logs\"
            
            echo \"Backend-Redis connection test:\"
            curl -f http://localhost:\$NEW_PORT/api/test/51 2>/dev/null && echo \"Backend responding\" || echo \"Backend not responding\"
            
            docker image prune -f
            rm -f /tmp/deploy_vars
          "

      - name: Deployment notification
        run: echo "✅ Backend deployment completed successfully!"
